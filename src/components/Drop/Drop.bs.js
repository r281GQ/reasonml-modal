// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDom = require("react-dom");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var FocusContainer$ReactHooksTemplate = require("../FocusContainer.bs.js");

function Drop(Props) {
  var content = Props.content;
  var children = Props.children;
  var target = React.useRef(null);
  var y = React.useRef(null);
  var match = React.useState((function () {
          return false;
        }));
  var setOpen = match[1];
  var clonedElement = React.cloneElement(content, {
        ref: (function (ref) {
            target.current = ref;
            return /* () */0;
          }),
        className: Css.style(/* :: */[
              Css.padding(Css.px(20)),
              /* :: */[
                Css.position(/* absolute */-1013592457),
                /* :: */[
                  Css.top(Css.px(400)),
                  /* :: */[
                    Css.backgroundColor(Css.red),
                    /* [] */0
                  ]
                ]
              ]
            ])
      });
  var clonedElementC = React.cloneElement(children, {
        ref: (function (ref) {
            y.current = ref;
            return /* () */0;
          })
      });
  React.useEffect((function () {
          var logger = function (d) {
            Curry._1(setOpen, (function (prev) {
                    return !prev;
                  }));
            console.log(d);
            return /* () */0;
          };
          var match = y.current;
          if (!(match == null)) {
            match.addEventListener("click", logger);
          }
          return (function (param) {
                    var match = y.current;
                    if (match == null) {
                      return /* () */0;
                    } else {
                      match.removeEventListener("click", logger);
                      return /* () */0;
                    }
                  });
        }));
  React.useEffect((function () {
          window.addEventListener("scroll", (function (e) {
                  window.scrollY;
                  window.innerHeight;
                  Belt_Option.mapWithDefault(Belt_Option.map(Caml_option.nullable_to_opt(target.current), (function (prim) {
                              return prim.getBoundingClientRect();
                            })), 0, (function (prim) {
                          return prim.top;
                        }));
                  return /* () */0;
                }));
          return undefined;
        }));
  return React.createElement(React.Fragment, {
              children: null
            }, clonedElementC, match[0] ? React.createElement("div", {
                    className: Css.style(/* :: */[
                          Css.position(/* relative */903134412),
                          /* [] */0
                        ])
                  }, React.createElement(FocusContainer$ReactHooksTemplate.make, {
                        children: Belt_Option.mapWithDefault(Belt_Array.get(Array.prototype.slice.call(document.getElementsByTagName("body")), 0), null, (function (param) {
                                return ReactDom.createPortal(clonedElement, param);
                              })),
                        value: /* record */[
                          /* lockScroll */false,
                          /* lockFocus */true,
                          /* target */y,
                          /* preventTabEscape */false
                        ]
                      })) : null);
}

var make = Drop;

exports.make = make;
/* Css Not a pure module */
