// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDom = require("react-dom");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var FocusContainer$ReactHooksTemplate = require("../FocusContainer.bs.js");

function identity(x) {
  return x;
}

var doc = document;

var fakeBody = doc.createElement("div");

var body = Belt_Option.mapWithDefault(Belt_Array.get(Array.prototype.slice.call(doc.getElementsByTagName("body")), 0), fakeBody, identity);

function top(element) {
  return element.getBoundingClientRect().top | 0;
}

function bottom(element) {
  return element.getBoundingClientRect().bottom | 0;
}

function Drop(Props) {
  var content = Props.content;
  var children = Props.children;
  var target = React.useRef(null);
  var drop = React.useRef(null);
  var match = React.useState((function () {
          return null;
        }));
  var setTargetState = match[1];
  var match$1 = React.useState((function () {
          return false;
        }));
  var setOpen = match$1[1];
  var targetElement = React.cloneElement(content, {
        ref: (function (ref1) {
            target.current = ref1;
            return Curry._1(setTargetState, (function (param) {
                          return ref1;
                        }));
          }),
        className: Css.style(/* :: */[
              Css.padding(Css.px(20)),
              /* :: */[
                Css.position(/* fixed */10615156),
                /* :: */[
                  Css.top(Css.px(0)),
                  /* :: */[
                    Css.backgroundColor(Css.red),
                    /* [] */0
                  ]
                ]
              ]
            ])
      });
  var dropElement = React.cloneElement(children, {
        ref: (function (ref) {
            drop.current = ref;
            return /* () */0;
          })
      });
  React.useEffect((function () {
          var closeHandler = function (e) {
            var match = drop.current;
            var match$1 = target.current;
            var hasClickHappenedInDropElements;
            if ((match == null) || (match$1 == null)) {
              hasClickHappenedInDropElements = false;
            } else {
              var hasOccuredInDropElement = match.contains(e.target);
              var hasOccuredInTargetElement = match$1.contains(e.target);
              hasClickHappenedInDropElements = hasOccuredInDropElement || hasOccuredInTargetElement;
            }
            var match$2 = !hasClickHappenedInDropElements;
            if (match$2) {
              return Curry._1(setOpen, (function (param) {
                            return false;
                          }));
            } else {
              return /* () */0;
            }
          };
          body.addEventListener("click", closeHandler, true);
          return (function (param) {
                    body.removeEventListener("click", closeHandler, true);
                    return /* () */0;
                  });
        }));
  React.useEffect((function () {
          var clickHandler = function (_e) {
            return Curry._1(setOpen, (function (prev) {
                          return !prev;
                        }));
          };
          var match = drop.current;
          if (!(match == null)) {
            match.addEventListener("click", clickHandler);
          }
          return (function (param) {
                    var match = drop.current;
                    if (match == null) {
                      return /* () */0;
                    } else {
                      match.removeEventListener("click", clickHandler);
                      return /* () */0;
                    }
                  });
        }));
  var update = function (targetRef, dropRef) {
    var match = targetRef.current;
    var match$1 = dropRef.current;
    if ((match == null) || (match$1 == null)) {
      return /* () */0;
    } else {
      var viewPortHeight = window.innerHeight;
      var targetTop = match.getBoundingClientRect().top | 0;
      var targetBottom = match.getBoundingClientRect().bottom | 0;
      var targetHeight = targetBottom - targetTop | 0;
      var dropTop = match$1.getBoundingClientRect().top | 0;
      var dropBottom = match$1.getBoundingClientRect().bottom | 0;
      var isDropBottomBelowViewPort = (dropBottom + targetHeight | 0) >= viewPortHeight;
      var isDropBottomAboveViewPort = dropBottom < 0;
      var isDropTopBelowViewPort = dropTop >= viewPortHeight;
      if (isDropBottomBelowViewPort) {
        if (isDropTopBelowViewPort) {
          match.setAttribute("style", "transform: translateY(" + ((viewPortHeight - targetHeight | 0).toString() + "px)"));
          return /* () */0;
        } else {
          match.setAttribute("style", "transform: translateY(" + ((dropTop - targetHeight | 0).toString() + "px)"));
          return /* () */0;
        }
      } else if (isDropBottomAboveViewPort) {
        match.setAttribute("style", "transform: translateY(0px)");
        return /* () */0;
      } else {
        match.setAttribute("style", "transform: translateY(" + (dropBottom.toString() + "px)"));
        return /* () */0;
      }
    }
  };
  React.useEffect((function () {
          var scrollHander = function (_e) {
            return update(target, drop);
          };
          window.addEventListener("scroll", scrollHander);
          return (function (param) {
                    window.removeEventListener("scroll", scrollHander);
                    return /* () */0;
                  });
        }));
  React.useEffect((function () {
          update(target, drop);
          return undefined;
        }), /* array */[match[0]]);
  return React.createElement(React.Fragment, {
              children: null
            }, dropElement, match$1[0] ? ReactDom.createPortal(React.createElement(FocusContainer$ReactHooksTemplate.make, {
                        children: targetElement,
                        value: /* record */[
                          /* lockScroll */false,
                          /* lockFocus */true,
                          /* target */target,
                          /* preventTabEscape */false
                        ]
                      }), body) : null);
}

var make = Drop;

exports.identity = identity;
exports.doc = doc;
exports.fakeBody = fakeBody;
exports.body = body;
exports.top = top;
exports.bottom = bottom;
exports.make = make;
/* doc Not a pure module */
