// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Uuid = require("uuid");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDom = require("react-dom");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_HashMapString = require("bs-platform/lib/js/belt_HashMapString.js");
var Webapi__Dom__Element = require("bs-webapi/src/Webapi/Webapi__Dom/Webapi__Dom__Element.js");
var Webapi__Dom__Document = require("bs-webapi/src/Webapi/Webapi__Dom/Webapi__Dom__Document.js");

Css.$$global("body", /* :: */[
      Css.margin(Css.px(0)),
      /* :: */[
        Css.position(/* relative */903134412),
        /* :: */[
          Css.minHeight(Css.vh(100)),
          /* [] */0
        ]
      ]
    ]);

function convert(param) {
  if (param) {
    return "auto";
  } else {
    return "hidden";
  }
}

function setScrollLock(value) {
  var partial_arg = "overflow:" + (
    value ? "auto" : "hidden"
  );
  return Belt_Option.mapWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(Webapi__Dom__Document.asHtmlDocument(document), (function (prim) {
                        return Caml_option.nullable_to_opt(prim.body);
                      })), Webapi__Dom__Element.asHtmlElement), /* () */0, (function (param) {
                param.setAttribute("style", partial_arg);
                return /* () */0;
              }));
}

var Helper = /* module */[
  /* convert */convert,
  /* setScrollLock */setScrollLock
];

var f = (/(svg|a|area|input|select|textarea|button|iframe|div)$/);

function check(param) {
  return f.test(param);
}

var u = React.createRef();

var focusContext = React.createContext(/* record */[
      /* lockScroll */true,
      /* lockFocus */true,
      /* target */u
    ]);

var make = focusContext.Provider;

var Inner = /* module */[
  /* u */u,
  /* focusContext */focusContext,
  /* make */make
];

function Modal$Modal$FocusContainer(Props) {
  var children = Props.children;
  var value = Props.value;
  var focusTracker = React.useRef(Belt_HashMapString.make(20));
  React.useEffect((function () {
          var match = value[/* lockScroll */0];
          if (match) {
            setScrollLock(/* Lock */0);
          }
          return (function (param) {
                    return setScrollLock(/* Unlock */1);
                  });
        }), /* array */[]);
  React.useEffect((function () {
          var $$process = function (param) {
            return Belt_Array.forEach(Belt_Array.keep(Belt_Option.mapWithDefault(Belt_Option.map(Belt_Option.flatMap(Belt_Option.flatMap(Webapi__Dom__Document.asHtmlDocument(document), (function (prim) {
                                              return Caml_option.nullable_to_opt(prim.body);
                                            })), Webapi__Dom__Element.asHtmlElement), (function (prim) {
                                      return prim.childNodes;
                                    })), /* array */[], (function (prim) {
                                  return Array.prototype.slice.call(prim);
                                })), (function (node) {
                              var match = value[/* target */2].current;
                              if (match == null) {
                                return true;
                              } else {
                                return !node.contains(match);
                              }
                            })), (function (node) {
                          return Belt_Array.forEach(Belt_Array.map(Belt_Array.keep(Belt_Array.keep(Belt_Option.mapWithDefault(Belt_Option.map(Webapi__Dom__Element.ofNode(node), (function (param) {
                                                            return param.getElementsByTagName("*");
                                                          })), /* array */[], (function (prim) {
                                                        return Array.prototype.slice.call(prim);
                                                      })), (function (x) {
                                                    return f.test(x.tagName.toLowerCase());
                                                  })), (function (x) {
                                                return Belt_Option.mapWithDefault(Caml_option.nullable_to_opt(x.getAttribute("tabindex")), true, (function (x) {
                                                              return x !== "-1";
                                                            }));
                                              })), (function (x) {
                                            console.log(x);
                                            return x;
                                          })), (function (x) {
                                        Belt_HashMapString.set(focusTracker.current, Uuid.v4(), x);
                                        x.setAttribute("tabindex", "-1");
                                        return /* () */0;
                                      }));
                        }));
          };
          setTimeout((function (param) {
                  $$process(/* () */0);
                  return /* () */0;
                }), 10);
          return (function (param) {
                    return Belt_HashMapString.forEach(focusTracker.current, (function (_key, element) {
                                  element.removeAttribute("tabindex");
                                  return /* () */0;
                                }));
                  });
        }), /* array */[]);
  return React.createElement(make, {
              value: value,
              children: children
            });
}

var FocusContainer = /* module */[
  /* f */f,
  /* check */check,
  /* Inner */Inner,
  /* make */Modal$Modal$FocusContainer
];

function Modal$Modal$Cover(Props) {
  return React.createElement("div", {
              className: Css.style(/* :: */[
                    Css.position(/* fixed */10615156),
                    /* :: */[
                      Css.top(Css.px(0)),
                      /* :: */[
                        Css.left(Css.px(0)),
                        /* :: */[
                          Css.right(Css.px(0)),
                          /* :: */[
                            Css.bottom(Css.px(0)),
                            /* :: */[
                              Css.zIndex(500),
                              /* :: */[
                                Css.height(Css.vh(100)),
                                /* :: */[
                                  Css.width(Css.vw(100)),
                                  /* :: */[
                                    Css.background(/* `hex */[
                                          5194459,
                                          "000"
                                        ]),
                                    /* :: */[
                                      Css.opacity(0.5),
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ])
            });
}

var Cover = /* module */[/* make */Modal$Modal$Cover];

var make$1 = React.forwardRef((function (Props, ref_) {
        var children = Props.children;
        var onOverlayClick = Props.onOverlayClick;
        var onEsc = Props.onEsc;
        var escapeHandler = function ($$event) {
          var match = $$event.key;
          if (match === "Escape") {
            return Curry._1(onEsc, /* () */0);
          } else {
            return /* () */0;
          }
        };
        React.useEffect((function () {
                window.addEventListener("keydown", escapeHandler);
                return (function (param) {
                          window.removeEventListener("keydown", escapeHandler);
                          return /* () */0;
                        });
              }), /* array */[]);
        var tmp = {
          className: Css.style(/* :: */[
                Css.position(/* fixed */10615156),
                /* :: */[
                  Css.top(Css.px(0)),
                  /* :: */[
                    Css.left(Css.px(0)),
                    /* :: */[
                      Css.right(Css.px(0)),
                      /* :: */[
                        Css.bottom(Css.px(0)),
                        /* :: */[
                          Css.zIndex(999),
                          /* :: */[
                            Css.height(Css.vh(100)),
                            /* :: */[
                              Css.width(Css.vw(100)),
                              /* :: */[
                                Css.display(/* flex */-1010954439),
                                /* :: */[
                                  Css.flexDirection(/* column */-963948842),
                                  /* :: */[
                                    Css.justifyContent(/* center */98248149),
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]),
          onClick: onOverlayClick
        };
        var tmp$1 = Belt_Option.map((ref_ == null) ? undefined : Caml_option.some(ref_), (function (prim) {
                return prim;
              }));
        if (tmp$1 !== undefined) {
          tmp.ref = Caml_option.valFromOption(tmp$1);
        }
        return React.createElement("div", tmp, children);
      }));

var Overlay = /* module */[/* make */make$1];

function Modal$Modal$ModalContentWrapper(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: Css.style(/* :: */[
                    Css.zIndex(999),
                    /* :: */[
                      Css.background(/* `hex */[
                            5194459,
                            "fff"
                          ]),
                      /* :: */[
                        Css.maxWidth(/* `percent */[
                              -119887163,
                              50
                            ]),
                        /* :: */[
                          Css.marginLeft(/* auto */-1065951377),
                          /* :: */[
                            Css.marginRight(/* auto */-1065951377),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]),
              onClick: (function (prim) {
                  prim.stopPropagation();
                  return /* () */0;
                })
            }, children);
}

var ModalContentWrapper = /* module */[/* make */Modal$Modal$ModalContentWrapper];

function renderToBody(element, onOverlayClick, onEsc, overlayRef) {
  var $$document$1 = document;
  var partial_arg = React.createElement(Modal$Modal$FocusContainer, {
        children: React.createElement(make$1, {
              children: null,
              onOverlayClick: onOverlayClick,
              onEsc: onEsc,
              ref: overlayRef
            }, React.createElement(Modal$Modal$Cover, { }), React.createElement(Modal$Modal$ModalContentWrapper, {
                  children: element
                })),
        value: /* record */[
          /* lockScroll */true,
          /* lockFocus */true,
          /* target */overlayRef
        ]
      });
  return Belt_Option.mapWithDefault(Belt_Array.get(Array.prototype.slice.call($$document$1.getElementsByTagName("body")), 0), null, (function (param) {
                return ReactDom.createPortal(partial_arg, param);
              }));
}

function Modal$Modal(Props) {
  var isOpen = Props.isOpen;
  var onOverlayClick = Props.onOverlayClick;
  var onEsc = Props.onEsc;
  var children = Props.children;
  var overlayRef = React.useRef(null);
  if (isOpen) {
    return renderToBody(children, onOverlayClick, onEsc, overlayRef);
  } else {
    return null;
  }
}

var Modal = /* module */[
  /* Helper */Helper,
  /* FocusContainer */FocusContainer,
  /* Cover */Cover,
  /* Overlay */Overlay,
  /* ModalContentWrapper */ModalContentWrapper,
  /* renderToBody */renderToBody,
  /* make */Modal$Modal
];

function Modal$1(Props) {
  var match = React.useState((function () {
          return false;
        }));
  var setOpen = match[1];
  return React.createElement("div", {
              className: Css.style(/* :: */[
                    Css.height(Css.px(4000)),
                    /* [] */0
                  ])
            }, React.createElement("div", undefined, React.createElement("button", {
                      onClick: (function (_e) {
                          return Curry._1(setOpen, (function (param) {
                                        return true;
                                      }));
                        })
                    }, "open the modal")), React.createElement("div", undefined, React.createElement("button", {
                      onClick: (function (_e) {
                          return Curry._1(setOpen, (function (param) {
                                        return true;
                                      }));
                        })
                    }, "open the modal")), React.createElement("div", undefined, React.createElement("button", {
                      onClick: (function (_e) {
                          return Curry._1(setOpen, (function (param) {
                                        return true;
                                      }));
                        })
                    }, "open the modal")), React.createElement("div", undefined, React.createElement("button", {
                      onClick: (function (_e) {
                          return Curry._1(setOpen, (function (param) {
                                        return true;
                                      }));
                        })
                    }, "open the modal")), React.createElement(Modal$Modal, {
                  isOpen: match[0],
                  onOverlayClick: (function (_e) {
                      return Curry._1(setOpen, (function (param) {
                                    return false;
                                  }));
                    }),
                  onEsc: (function (_e) {
                      return Curry._1(setOpen, (function (param) {
                                    return false;
                                  }));
                    }),
                  children: React.createElement("div", undefined, "this is the modal content")
                }));
}

var make$2 = Modal$1;

exports.Modal = Modal;
exports.make = make$2;
/*  Not a pure module */
